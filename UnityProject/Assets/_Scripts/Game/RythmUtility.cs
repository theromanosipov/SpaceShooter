using UnityEngine;
using System.Collections;

public class RythmUtility : MonoBehaviour {

    private static float[] beatArray = new float[488] { 1.317f,1.896f,2.507f,3.119f,3.687f,4.299f,4.866f,5.463f,6.06f,6.657f,7.239f,7.821f,8.403f,8.985f,9.612f,10.179f,10.791f,11.37f,11.97f,12.55f,13.15f,13.73f,14.32f,14.925f,15.51f,16.112f,16.7f,17.28f,17.875f,18.468f,19.05f,19.647f,20.25f,20.841f,21.427f,22.022f,22.62f,23.2f,23.795f,24.38f,24.976f,25.577f,26.159f,26.752f,27.336f,27.937f,28.53f,29.112f,29.705f,30.289f,30.869f,31.479f,32.057f,32.654f,33.237f,33.828f,35.029f,35.612f,36.206f,36.797f,37.391f,37.987f,38.571f,39.167f,39.75f,40.337f,40.928f,41.529f,42.118f,42.701f,43.287f,43.886f,44.483f,45.069f,45.663f,46.262f,46.848f,47.428f,48.017f,48.603f,49.197f,49.78f,50.374f,50.965f,51.564f,52.158f,52.749f,53.348f,53.94f,54.527f,55.119f,55.715f,56.304f,56.897f,57.484f,58.077f,58.668f,59.253f,59.846f,60.44f,61.038f,61.627f,62.216f,62.807f,63.4f,63.99f,64.58f,65.175f,65.75f,66.358f,66.946f,67.537f,68.13f,68.717f,69.312f,69.907f,70.5f,71.086f,71.672f,72.262f,72.858f,73.441f,74.042f,74.632f,75.229f,75.813f,76.404f,76.992f,77.59f,78.179f,78.722f,79.306f,79.957f,80.57f,81.132f,81.721f,82.31f,82.898f,83.494f,84.081f,84.669f,85.26f,85.848f,86.44f,87.035f,87.623f,88.219f,88.804f,89.394f,89.991f,90.58f,91.162f,91.761f,92.348f,92.945f,93.536f,94.126f,94.722f,95.306f,95.894f,96.493f,97.079f,97.674f,98.248f,98.85f,99.446f,100.031f,100.634f,101.229f,101.823f,102.41f,103.001f,103.598f,104.183f,104.777f,105.369f,105.96f,106.556f,107.141f,107.732f,108.331f,108.914f,109.499f,110.096f,110.687f,111.275f,111.864f,112.456f,113.049f,113.636f,114.226f,114.82f,115.411f,116f,116.598f,117.187f,117.772f,118.367f,118.949f,119.536f,120.132f,120.717f,121.307f,121.904f,122.492f,123.085f,123.674f,124.262f,124.851f,125.446f,126.035f,126.636f,127.227f,127.811f,128.404f,128.991f,129.583f,130.175f,130.76f,131.36f,131.947f,132.54f,133.123f,133.719f,134.313f,134.905f,135.493f,136.09f,136.674f,137.269f,137.851f,138.452f,139.04f,139.629f,140.225f,140.817f,141.406f,141.994f,142.584f,143.176f,143.773f,144.359f,144.951f,145.543f,146.136f,146.724f,147.313f,147.907f,148.495f,149.084f,149.68f,150.275f,150.864f,151.457f,152.041f,152.625f,153.228f,153.813f,154.404f,154.995f,155.591f,156.184f,156.77f,157.361f,157.956f,158.545f,159.138f,159.731f,160.324f,160.914f,161.497f,162.09f,162.681f,163.271f,163.866f,164.461f,165.049f,165.643f,166.232f,166.81f,167.413f,168.001f,168.594f,169.187f,169.774f,170.37f,170.96f,171.544f,172.14f,172.729f,173.326f,173.912f,174.51f,175.101f,175.688f,176.277f,176.873f,177.466f,178.055f,178.651f,179.24f,179.831f,180.419f,181.007f,181.6f,182.192f,182.787f,183.377f,183.965f,184.558f,185.147f,185.733f,186.328f,186.921f,187.512f,188.107f,188.695f,189.287f,189.874f,190.456f,191.057f,191.65f,192.238f,192.83f,193.42f,194.016f,194.61f,195.198f,195.789f,196.379f,196.971f,197.567f,198.152f,198.747f,199.33f,199.927f,200.519f,201.107f,201.699f,202.292f,202.878f,203.477f,204.062f,204.657f,205.245f,205.834f,206.428f,207.024f,207.616f,208.201f,208.791f,209.383f,209.975f,210.568f,211.161f,211.755f,212.343f,212.934f,213.522f,214.112f,214.705f,215.298f,215.891f,216.481f,217.071f,217.667f,218.25f,218.844f,219.438f,220.025f,220.613f,221.208f,221.787f,222.381f,222.964f,223.553f,224.148f,224.73f,225.327f,225.924f,226.511f,227.103f,227.69f,228.283f,228.877f,229.467f,230.061f,230.65f,231.239f,231.829f,232.42f,233.013f,233.611f,234.199f,234.787f,235.387f,235.976f,236.574f,237.155f,237.75f,238.34f,238.925f,239.517f,240.107f,240.7f,241.297f,241.884f,242.475f,243.069f,243.659f,244.247f,244.84f,245.43f,246.021f,246.611f,247.21f,247.798f,248.387f,248.982f,249.578f,250.168f,250.756f,251.344f,251.937f,252.53f,253.119f,253.714f,254.305f,254.897f,255.483f,256.071f,256.664f,257.251f,257.842f,258.43f,259.02f,259.611f,260.2f,260.782f,261.377f,261.97f,262.56f,263.153f,263.747f,264.334f,264.932f,265.513f,266.108f,266.696f,267.292f,267.88f,268.477f,269.062f,269.653f,270.251f,270.839f,271.43f,272.023f,272.612f,273.205f,273.788f,274.379f,274.969f,275.553f,276.146f,276.739f,277.328f,277.925f,278.508f,279.097f,279.696f,280.279f,280.87f,281.466f,282.056f,282.651f,283.241f,283.834f,284.423f,285.011f,285.606f,286.202f,286.792f,287.385f,287.975f,288.564f,289.154f,289.746f};
    private static float beatProgress;
    private static int currentBeat = 0;

    private static Color[] rainbow = new Color[6] { new Color32(255,0,0,255), 
                                                    new Color32(255,142,0,255), 
                                                    new Color32(255,237,0,255), 
                                                    new Color32(0,255,23,255), 
                                                    new Color32(0,107,255,255), 
                                                    new Color32(178,0,255,255)
    };

    public static float[] getBeatArray() {
        return beatArray;
    }

    void Update() {
        float mainSongTime = (float)audio.timeSamples / (float)audio.clip.frequency;

        int i = (int) ((mainSongTime - 1.317f) / 0.591);
        while (beatArray[i] > mainSongTime) {
            i--;
        }
        while (beatArray[i + 1] < mainSongTime) {
            i++;
        }
        currentBeat = i;
        beatProgress = (mainSongTime - beatArray[i]) / (beatArray[i + 1] - beatArray[i]);
    }

    public static float getBeatProgress() {
        return beatProgress;
    }

    public static int getCurrentBeat() {
        return currentBeat;
    }

    public static Color[] getRainbow() {
        return rainbow;
    }

}
